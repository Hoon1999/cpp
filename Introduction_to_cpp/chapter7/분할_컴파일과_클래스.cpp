#include "test1.h"
#include "test2.h"
#include "testClass.h"

int main() {
	/*
	* 1. 분할 컴파일
	* 2. 추상화와 클래스(testClass.h)
	* 3. this 포인터(testClass.cpp)
	* 4. 클래스 배열
	*/
	// 분할 컴파일은 코드를 세 부분으로 나눈다.
	// 1. 헤더 2. 함수의 몸체 3. 메인함수
	
	/* 1. 헤더에 포함되는 코드
	*  1.1 함수 원형
	*  1.2 #define 이나 const
	*  1.3 구조체의 선언
	*  1.4 클래스의 선언
	*  1.5 템플릿의 선언
	*  1.6 인라인 함수
	*/

	/*
	* 헤더를 만들 때 유의해야 할 점은 단 한번만 포함시켜야 해야한다는 것이다.
	* 예를들어 test1.h 를 만들었다고 하자.
	* 그리고 test2.h 를 test1.h 포함하고 있다면, test1.h 와 test2.h 를 같이 #include 할 수 없다.
	* 만약 중복 호출이 예상이 된다면 test1.h 에 #ifndef ~ #endif 구문을 삽입하여야 한다.
	*/
	
	testf(); // 함수의 선언 부분은 test1.h 에, 함수의 정의 부분은 testFunction.cpp 에 있다.


	testClass a(10, 0.5);
	a.show(); // 멤버 접근 연산자(.) 을 사용한다.
	cout << "-----------------------------------" << endl;


	// 클래스 배열의 선언은 일반 배열의 선언방법과 동일하다.
	// 딱 한가지. 초기화 방법만 빼고 동일하다.
	// 객체를 생성하면 생성자가 동작해야 하고, 생성자를 통해 초기화를 하니
	// 초기화 하는 자리에 값 대신 생성자를 넣으면 된다.
	testClass b[3] = {
		testClass(1, 1.1), //a[0] 초기화
		testClass(2, 2.2), //a[1] 초기화
		testClass(3, 3.3)
	};
	return 0;
}
//2. 함수의 몸체
//void testf() {
//	cout << "분할 컴파일 공부중입니다." << endl;
//}